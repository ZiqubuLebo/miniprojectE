// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using miniprojectE.Data;

#nullable disable

namespace miniprojectE.Migrations
{
    [DbContext(typeof(AppDB))]
    [Migration("20251003063050_Migrate")]
    partial class Migrate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("miniprojectE.Models.Entities.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressID"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddressID");

                    b.HasIndex("UserID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.Component", b =>
                {
                    b.Property<int>("ComponentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComponentID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastIpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MinimumLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ComponentID");

                    b.ToTable("Component");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.ComponentCompatibility", b =>
                {
                    b.Property<int>("CompatibiltyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompatibiltyID"));

                    b.Property<int>("ComponentID1")
                        .HasColumnType("int");

                    b.Property<int>("ComponentID2")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompatible")
                        .HasColumnType("bit");

                    b.Property<string>("notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompatibiltyID");

                    b.HasIndex("ComponentID1");

                    b.HasIndex("ComponentID2");

                    b.ToTable("ComponentCompatibility");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.ComponentPopularity", b =>
                {
                    b.Property<int>("PopularityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PopularityID"));

                    b.Property<DateTime>("CalculatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ComponentID")
                        .HasColumnType("int");

                    b.Property<int>("PeriodMonth")
                        .HasColumnType("int");

                    b.Property<int>("PeriodYear")
                        .HasColumnType("int");

                    b.Property<int?>("TimesOrdered")
                        .HasColumnType("int");

                    b.Property<int?>("TotalQuantitySold")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalRevenue")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("PopularityID");

                    b.HasIndex("ComponentID");

                    b.ToTable("ComponentPopularity");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.Furniture", b =>
                {
                    b.Property<int>("FurnitureID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FurnitureID"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FurnitureType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FurnitureID");

                    b.ToTable("Furniture");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.ItemComponent", b =>
                {
                    b.Property<int>("ItemComponentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemComponentID"));

                    b.Property<int>("ComponentID")
                        .HasColumnType("int");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("QuantityUsed")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPriceAtOrder")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("ItemComponentID");

                    b.HasIndex("ComponentID");

                    b.HasIndex("ItemID");

                    b.ToTable("ItemComponent");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.OrderHistoryLog", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogID"));

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("StatusFrom")
                        .HasColumnType("int");

                    b.Property<int>("StatusTo")
                        .HasColumnType("int");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LogID");

                    b.HasIndex("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("OrderHistoryLog");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemID"));

                    b.Property<DateTime?>("AssemblyCompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AssemblyStartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("AssemblyStatus")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ItemTotalPrice")
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TemplateID")
                        .HasColumnType("int");

                    b.HasKey("OrderItemID");

                    b.HasIndex("OrderID");

                    b.HasIndex("TemplateID");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.OrderProgress", b =>
                {
                    b.Property<int>("OrderProgressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderProgressID"));

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("UpdatedAt")
                        .HasColumnType("date");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderProgressID");

                    b.ToTable("OrderProgress");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.Orders", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<Guid?>("ClerkID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpectedCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderID");

                    b.HasIndex("AddressID");

                    b.HasIndex("ClerkID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("OrderNumber")
                        .IsUnique();

                    b.ToTable("Order");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.PurchaseOrder", b =>
                {
                    b.Property<int>("PurchaseOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseOrderID"));

                    b.Property<DateTime?>("ExpectedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ManagerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("PurchaseOrderID");

                    b.HasIndex("ManagerID");

                    b.ToTable("PurchaseOrder");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.PurchaseOrderItem", b =>
                {
                    b.Property<int>("PurchaseItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseItemID"));

                    b.Property<int>("ComponentID")
                        .HasColumnType("int");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("PurchaseOrderID")
                        .HasColumnType("int");

                    b.Property<int>("QuantityOrdered")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityReceived")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("PurchaseItemID");

                    b.HasIndex("ComponentID");

                    b.HasIndex("PurchaseOrderID");

                    b.ToTable("PurchaseOrderItem");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.Stock", b =>
                {
                    b.Property<int>("StockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockID"));

                    b.Property<int>("ComponentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("MovementDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovementType")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("QuantityAfter")
                        .HasColumnType("int");

                    b.Property<int>("QuantityBefore")
                        .HasColumnType("int");

                    b.Property<int>("QuantityChange")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StockID");

                    b.HasIndex("ComponentID");

                    b.HasIndex("UserID");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.TemplateComponent", b =>
                {
                    b.Property<int>("TemplateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemplateID"));

                    b.Property<int>("ComponentID")
                        .HasColumnType("int");

                    b.Property<int>("ComponentRole")
                        .HasColumnType("int");

                    b.Property<int>("FurnitureID")
                        .HasColumnType("int");

                    b.Property<bool>("isRequired")
                        .HasColumnType("bit");

                    b.Property<int>("maxLevel")
                        .HasColumnType("int");

                    b.Property<int>("minLevel")
                        .HasColumnType("int");

                    b.HasKey("TemplateID");

                    b.HasIndex("ComponentID");

                    b.HasIndex("FurnitureID", "ComponentID")
                        .IsUnique();

                    b.ToTable("TemplateComponent");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.Users", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserID");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.Address", b =>
                {
                    b.HasOne("miniprojectE.Models.Entities.Users", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.ComponentCompatibility", b =>
                {
                    b.HasOne("miniprojectE.Models.Entities.Component", "ComponentA")
                        .WithMany("CompatibilitiesAsA")
                        .HasForeignKey("ComponentID1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("miniprojectE.Models.Entities.Component", "ComponentB")
                        .WithMany("CompatibilitiesAsB")
                        .HasForeignKey("ComponentID2")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ComponentA");

                    b.Navigation("ComponentB");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.ComponentPopularity", b =>
                {
                    b.HasOne("miniprojectE.Models.Entities.Component", "Component")
                        .WithMany("PopularityRecords")
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.ItemComponent", b =>
                {
                    b.HasOne("miniprojectE.Models.Entities.Component", "Component")
                        .WithMany("ItemComponents")
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("miniprojectE.Models.Entities.OrderItem", "Item")
                        .WithMany("ItemComponents")
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.OrderHistoryLog", b =>
                {
                    b.HasOne("miniprojectE.Models.Entities.Orders", "Order")
                        .WithMany("OrderHistoryLogs")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("miniprojectE.Models.Entities.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.OrderItem", b =>
                {
                    b.HasOne("miniprojectE.Models.Entities.Orders", "Order")
                        .WithMany("CustomFurnitureItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("miniprojectE.Models.Entities.Furniture", "Template")
                        .WithMany("CustomFurnitureItems")
                        .HasForeignKey("TemplateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.Orders", b =>
                {
                    b.HasOne("miniprojectE.Models.Entities.Address", "ShippingAddress")
                        .WithMany("ShippingOrders")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("miniprojectE.Models.Entities.Users", "Clerk")
                        .WithMany("AssignedOrders")
                        .HasForeignKey("ClerkID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("miniprojectE.Models.Entities.Users", "Customer")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Clerk");

                    b.Navigation("Customer");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("miniprojectE.Models.Entities.Users", "Manager")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.PurchaseOrderItem", b =>
                {
                    b.HasOne("miniprojectE.Models.Entities.Component", "Component")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("miniprojectE.Models.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("PurchaseOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.Stock", b =>
                {
                    b.HasOne("miniprojectE.Models.Entities.Component", "Component")
                        .WithMany("StockMovements")
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("miniprojectE.Models.Entities.Users", "User")
                        .WithMany("StockMovements")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("User");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.TemplateComponent", b =>
                {
                    b.HasOne("miniprojectE.Models.Entities.Component", "Component")
                        .WithMany("TemplateComponents")
                        .HasForeignKey("ComponentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("miniprojectE.Models.Entities.Furniture", "Template")
                        .WithMany("TemplateComponents")
                        .HasForeignKey("FurnitureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.Address", b =>
                {
                    b.Navigation("ShippingOrders");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.Component", b =>
                {
                    b.Navigation("CompatibilitiesAsA");

                    b.Navigation("CompatibilitiesAsB");

                    b.Navigation("ItemComponents");

                    b.Navigation("PopularityRecords");

                    b.Navigation("PurchaseOrderItems");

                    b.Navigation("StockMovements");

                    b.Navigation("TemplateComponents");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.Furniture", b =>
                {
                    b.Navigation("CustomFurnitureItems");

                    b.Navigation("TemplateComponents");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.OrderItem", b =>
                {
                    b.Navigation("ItemComponents");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.Orders", b =>
                {
                    b.Navigation("CustomFurnitureItems");

                    b.Navigation("OrderHistoryLogs");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderItems");
                });

            modelBuilder.Entity("miniprojectE.Models.Entities.Users", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("AssignedOrders");

                    b.Navigation("CustomerOrders");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("StockMovements");
                });
#pragma warning restore 612, 618
        }
    }
}
